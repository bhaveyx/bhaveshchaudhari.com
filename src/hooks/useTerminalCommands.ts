"use client"

import { usePathname, useRouter } from "next/navigation"
import { useTheme } from "next-themes"
import { useBlogStore } from "@/stores/blog-store"
// import { useTerminalStore } from "@/stores/terminal-store"
import { CONTACT_EMAIL, SOCIAL_LINKS, WEBSITE_URL } from "@/constants"

interface Command {
    name: string
    description: string
    action: (args: string[]) => string | string[] | Promise<string | string[]>
    usage?: string
    examples?: string[]
}

export function useTerminalCommands() {
    const currentDirectory = "~"
    const router = useRouter()
    const pathname = usePathname()
    const { theme, setTheme } = useTheme()

    const blogPosts = useBlogStore((state) => state.blogPosts)
    const isLoadingBlogs = useBlogStore((state) => state.isLoading)
    const searchPosts = useBlogStore((state) => state.searchPosts)

    // const {
    //     closeTerminal,
    //     minimizeTerminal,
    //     setTheme: setTerminalTheme,
    //     theme: terminalTheme,
    //     setOpacity,
    //     resetTerminal,
    // } = useTerminalStore()

    const commands: Record<string, Command> = {
        help: {
            name: "help",
            description: "Show available commands",
            usage: "help [command]",
            examples: ["help", "help ls", "help search"],
            action: (args) => {
                if (args.length > 0) {
                    const cmd = commands[args[0]]
                    if (cmd) {
                        return [
                            `Command: ${cmd.name}`,
                            `Description: ${cmd.description}`,
                            cmd.usage ? `Usage: ${cmd.usage}` : "",
                            cmd.examples ? `Examples: ${cmd.examples.join(", ")}` : "",
                        ].filter(Boolean)
                    }
                    return `Command '${args[0]}' not found. Type 'help' to see all commands.`
                }

                return [
                    "Available commands:",
                    "",
                    "## Information:",
                    "  help [cmd]      - Show help (optionally for specific command)",
                    "  about           - Learn about me",
                    "  whoami          - Display current user",
                    "  date            - Show current date and time",
                    "",
                    "## Contact:",
                    "  contact         - Get my contact information",
                    "",
                    "## Navigation:",
                    "  open <target>   - Open blog post or other available targets (type open to see options)",
                    "  goto <page>     - Navigate to different pages",
                    "",
                    "## Blog & Content:",
                    "  blog            - See latest blog posts",
                    "  search <term>   - Search through blog posts",
                    "  featured        - Show featured posts",
                    "  recent [num]    - Show recent posts",
                    "",
                    "## File System:",
                    "  pwd             - Show current directory",
                    "  cat <file>      - Display file contents",
                    "",
                    "## Projects:",
                    "  projects        - View my featured projects",
                    "## Must Try:",
                    "  rm -rf /        - You may test that assumption at your convenience ",
                    // "",
                    // "üé® Terminal Control:",
                    // "  theme           - Toggle terminal theme",
                    // "  opacity <0-100> - Set terminal opacity",
                    // "  minimize        - Minimize terminal",
                    // "  close           - Close terminal",
                    // "  reset           - Reset terminal position/size",
                    // "",
                    // "üí° Global Shortcuts:",
                    // "  Ctrl + `        - Toggle terminal anywhere",
                    // "  Ctrl + Shift + T - Alternative toggle",
                    // "  Escape          - Close terminal",
                    "",
                    "üí° Tips:",
                    "  ‚Üë/‚Üì arrows     - Command history",
                    "  Tab            - Auto-complete commands",
                    "  clear           - Clear terminal history",
                    // "  Drag header    - Move terminal",
                    // "  Drag corner    - Resize terminal",
                ]
            },
        },

        pwd: {
            name: "pwd",
            description: "Print working directory",
            action: () => currentDirectory,
        },

        cat: {
            name: "cat",
            description: "Display file contents",
            usage: "cat <filename>",
            examples: ["cat about.md", "cat contact.txt"],
            action: (args) => {
                if (args.length === 0) {
                    return "cat: missing file operand"
                }

                const filename = args[0]

                if (filename === "about.md") {
                    return [
                        "# About Bhavesh Chaudhari",
                        "",
                        "Full-Stack Developer & Builder",
                        "Location: India",
                        "",
                        "## About Me",
                        "Hi, I‚Äôm Bhavesh. I love building things with code.",
                        "As AI reshapes everything faster than we can imagine,",
                        "I‚Äôm using this space to document my thoughts,",
                        "experiments, and lessons as I lay the foundation",
                        "for something bigger.",
                        "",
                        "## Interests",
                        "- Web technologies & scalable systems",
                        "- SaaS, Indie Hacking",
                        "- AI & how it changes how we build",
                        "- Sharing what I learn",
                    ];
                }

                if (filename === "contact.txt") {
                    return [
                        "Contact Information",
                        "==================",
                        "",
                        `Email: ${CONTACT_EMAIL}`,
                        `GitHub: ${SOCIAL_LINKS.github}`,
                        `LinkedIn: ${SOCIAL_LINKS.linkedin}`,
                        `Twitter: ${SOCIAL_LINKS.twitter}`,
                        `Website: ${WEBSITE_URL}`,
                    ]
                }

                return `cat: ${filename}: No such file or directory`
            },
        },

        about: {
            name: "about",
            description: "About Bhavesh Chaudhari",
            action: () => [
                "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                "‚îÇ              ABOUT ME                   ‚îÇ",
                "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                "",
                "Full-Stack Developer & Builder",
                "Location: India",
                "",
                "Hi, I‚Äôm Bhavesh. I love building things with code.",
                "As AI reshapes everything faster than we can imagine,",
                "I‚Äôm using this space to document my thoughts,",
                "experiments, and lessons as I lay the foundation",
                "for something bigger.",
                "",
                "## Interests",
                "- Web technologies & scalable systems",
                "- SaaS, Indie Hacking",
                "- AI & how it changes how we build",
                "- Sharing what I learn",
            ],
        },

        whoami: {
            name: "whoami",
            description: "Display current user",
            action: () => "bhavesh",
        },

        "rm -rf /": {
            name: "rm -rf /",
            description: "Try on your own risk",
            action: () => {
                //    setTimeout(()=>{
                //      window.open("https://www.youtube.com/watch?v=xvFZjo5PgG0", "_blank")
                //    }, 200)
                return [
                    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                    "‚îÇ         YOU KNOW THE RULES AND SO DO I       ‚îÇ",
                    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚°ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ª‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚°Ω‚£Ø‚£ª‚£ª‚°Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ª‚£ª",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ª‚£ª‚£ª‚£ª‚£ª‚£ª‚°Ω‚£Ø‚£ü‚¢∑‚†ç‚†ü‚†â‚†õ‚¢ø‚¢ø‚£ª‚£ª‚¢ø‚£ø‚£ø‚£Ø‚£ª‚°Ω‚£Ø‚£ª‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚¢Ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ª‚£ª‚£ª‚°ü‚°Ö‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ü‚°π‚£ª‚£ª‚°Ω‚£Ø‚£ª‚°Ω‚£Ø‚£ª‚°Ω‚£ª‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ª‚£ª",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ø‚°ü‚°õ‚°ú‚°ú‚£é‚¢¶‚¢∂‚£ñ‚°¥‚°Ä‚††‚£ø‚£ø‚£ø‚£ü‚£ü‚£ü‚£ü‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ª‚£ª‚£ª",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ª‚¢Ü‚¢≠‚¢é‚¢é‚¢û‚°ù‚£ù‚°Ω‚°Ω‚°£‚¢Ç‚£ü‚¢Ø‚¢Ø‚¢Ø‚£ø‚£ª‚£ª‚°Ω‚£ª‚°Ω‚£ª‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ü‚£ø‚£ø‚£ø‚£ø‚£ª",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ü‚¢ß‚°í‚°î‚¢Ü‚¢Ø‚¢é‚†ö‚°ú‚°á‚£º‚£ø‚£ø‚£Ø‚£ª‚£ª‚£ª‚£ª‚¢Ø‚£ø‚£ø‚£ª‚£ª‚£ª‚£ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ª‚£ª‚£ª‚£ü‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢π‚¢ß‚¢£‚¢£‚†°‚°ã‚°Ø‚£´‚¢Ø‚°π‚£π‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ª‚£ª‚£ª‚£ø‚£ø‚£ª‚£ª‚£ª‚£ø‚£ü‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ª‚¢ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ß‚¢£‚¢¢‚¢å‚£ç‚°π‚°Ω‚£π‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ω‚£Ø‚£ª‚¢Ø‚£ª‚¢Ø‚£ª‚£ª‚£ø‚£ø‚£ø‚£ø‚£ª‚£ª‚£ª‚£ª‚¢ø‚¢ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚°Ω‚£ç‚¢é‚¢é‚¢ù‚¢è‚¢è‚£ù‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚°Ω‚£Ø‚£ª‚£ª‚£ø‚£ø‚£ü‚¢ø‚£ø‚¢ø‚£ª‚£ª‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ü‚£ü‚£ü‚°ú‚°ú‚°ú‚°ù‚°≠‚£´‚¢´‚†Ç‚¢´‚£ø‚£ø‚£ø‚£ü‚¢Ø‚£ª‚£ª‚£ª‚°Ω‚£ª‚£ø‚£ø‚£ø‚£ü‚£ø‚£ø‚£ø‚£ª‚£ü‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚¢ø‚°ø‚£ø‚¢ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚°ø‚°Ω‚°ª‚°ø‚£á‚¢£‚¢£‚†±‚°±‚°±‚£Ω‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚¢â‚†ç‚°õ‚¢ø‚¢Ø‚£ª‚£ª‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚¢ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ü‚¢ø‚£ª‚£ª‚°ø‚£è‚¢ã‚†Ä‚†Ä‚†Ä‚£π‚£ª‚°á‚¢£‚†±‚£•‚£ª‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£ø‚£ª‚£ø‚£ø‚£ø‚£ü‚£ü‚£ü‚°Ω‚£ª‚£ø‚°ø‚°ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚¢ø‚£ª‚£ø‚¢ø‚£ø‚£ø‚¢ø‚£ª‚£ª‚£ª‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚††‚°£‚¢¢‚†±‚°â‚†ô‚†õ‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ª‚°Ω‚£ª‚£ø‚¢Ø‚£ª‚£ø‚£ø‚¢Ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ª‚£ª‚£ø‚£ü‚£ü‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ü‚£ü‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢Ü‚°ë‚†°‚†â‚†ã‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ª‚¢Ø‚£ª‚°Ω‚£ª‚£ª‚°ø‚£Ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ª‚£ü‚£ü‚£ø‚£ø‚£ø‚£ø‚£ü‚£ü‚£ü‚£ü‚£ø‚£ø‚£ø‚£ø‚£ü‚£ü‚°Ω‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Å‚£Ø‚†ö‚†π‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ª‚¢Ø‚¢Ø‚£ª‚£ø‚£ø‚£ª‚£ª‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ø‚°ø‚£ª‚£ª‚£ø‚£ø‚£ø‚¢ø‚£ª‚¢Ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚£ü‚†ñ‚°ñ‚°§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚¢ø‚£ª‚£ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚¢Ø‚£ª‚£ª‚£ª",
                    "rick:‚£ø‚£ª‚£ª‚£ø‚£ø‚£ø‚£ø‚£ª‚£Ω‚£ø‚£ø‚£ü‚£ü‚¢ø‚£ø‚£ø‚°ø‚£ª‚£ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢¶‚¢¢‚£†‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†©‚°õ‚°ù‚°ú‚°ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ø‚£ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø",
                    "rick:‚£ø‚£ª‚£ª‚£ª‚£ø‚£ø‚°ø‚£ª‚£ø‚£ø‚£ª‚£ª‚£ø‚£ø‚°ø‚£ø‚£ª‚£ª‚£ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚°ú‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†å‚£å‚¢é‚°ú‚°ú‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ª‚£ø‚£ø‚°ø‚£ü‚¢ø‚£ø‚£ø‚£ø",
                    "rick:‚£ü‚£ø‚£ø‚£ø‚°Ω‚°Ω‚°Ω‚£ª‚£π‚°Ω‚£ø‚£ø‚£ø‚£ª‚£ª‚£ª‚£ª‚°Ω‚£ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢¢‚†£‚†í‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†é‚¢é‚¢é‚¢é‚¢é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ü‚°Ω‚£ø‚£ø‚£ª‚£ª‚£ª‚¢ø‚£ø‚£ø",
                    "rick:‚£ø‚£ø‚¢ø‚£ø‚£Ø‚£´‚£è‚¢Ø‚£´‚£ø‚£ø‚£ø‚£ø‚£ü‚£ü‚£ü‚£ü‚°Ω‚°Ω‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢Ä‚†Ä‚†∞‚°∞‚†§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°ù‚°Ω‚°Ω‚£ø‚£ø‚£ø‚£ª‚°ù‚°Ω",
                    "rick:‚£Ø‚£Ø‚£Ø‚£Ø‚¢Ø‚£´‚¢´‚£ª‚°ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚°Ω‚°Ω‚£≠‚†Ç‚†Ä‚°∞‚°±‚†°‚†¢‚¢Ç‚†Ü‚†Ä‚¢†‚†∞‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚¢Ø‚¢´‚£´‚°ø‚£ª‚£ø‚£ø‚£ø‚£ª‚°π",
                    "rick:‚°ø‚°ø‚£ª‚£ª‚£ª‚¢≠‚£ö‚¢ß‚¢´‚£ª‚£ø‚£ø‚°ø‚°Ω‚°Ω‚°Ω‚°Ω‚£π‚£ù‚¢á‚†Ñ‚†Ä‚†Ä‚†Ñ‚†Ñ‚†Ñ‚°ê‚†Ä‚†Ñ‚°ê‚†ê‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ù‚£ù‚°Ω‚£π‚¢Ω‚¢Ø‚°ª‚£ª‚£ü‚¢Ø‚¢´‚£ö‚£ü‚£ü‚£ü‚£ü‚£ü‚£ü‚°ù",
                    "rick:‚£Ø‚£ª‚°Ω‚£Ø‚£ª‚°ú‚°µ‚°Ω‚£é‚¢≠‚£ª‚°ù‚°Ω‚£Ω‚°Ω‚£ù‚£ù‚£ù‚°ù‚£ó‚¢≠‚¢é‚†Ä‚†Ä‚†Ç‚†Ç‚†Ä‚†Ä‚†Ä‚°ê‚†ê‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£π‚£ù‚£ù‚°ù‚£ù‚°Ω‚°Ω‚°π‚£ö‚†µ‚°≠‚¢Ø‚¢Ø‚¢Ø‚£ª‚°Ω‚°Ω‚££",
                    "rick:‚£ü‚£ü‚°Ω‚£Ø‚¢Ø‚¢é‚¢é‚¢Ø‚£è‚°ó‚°ù‚£ù‚°Ω‚£ª‚¢Ø‚£´‚¢´‚¢´‚£´‚£ª‚¢Ø‚°≥‚°±‚°±‚°±‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚°ù‚°ù‚°ù‚£ù‚°ù‚°ù‚°≠‚£´‚¢´‚¢≠‚£ö‚£ù‚£ù‚£ù‚°Ω‚£π‚£π‚¢ß",
                    "rick:‚¢è‚†Ø‚¢´‚¢´‚¢´‚¢™‚¢é‚¢Ø‚¢è‚†≥‚°π‚°π‚£ª‚°ø‚°Ø‚£´‚¢´‚°π‚°π‚°Ω‚°Ω‚°π‚°∏‚°ú‚°Ñ‚†Ä‚†Ä‚¢Ä‚¢Ç‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°≠‚°≠‚£´‚°π‚°π‚°≠‚£´‚¢´‚¢´‚£ö‚°ú‚°ù‚°ù‚£ù‚£ù‚¢Ω‚°π‚°≠",
                ]
            },
        },

        date: {
            name: "date",
            description: "Show current date and time",
            action: () => new Date().toString(),
        },

        blog: {
            name: "blog",
            description: "Latest blog posts",
            action: () => {
                if (isLoadingBlogs) {
                    return "Loading blog posts..."
                }

                if (blogPosts.length === 0) {
                    return [
                        "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                        "‚îÇ             NO POSTS FOUND              ‚îÇ",
                        "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                        "",
                        "No blog posts available at the moment.",
                        "Check back later for new content!",
                    ]
                }

                const output = [
                    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                    "‚îÇ             LATEST POSTS                ‚îÇ",
                    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                    "",
                    `Found ${blogPosts.length} blog post${blogPosts.length === 1 ? "" : "s"}:`,
                    "",
                ]

                blogPosts.slice(0, 10).forEach((post, index) => {
                    const date = new Date(post.publishedAt).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                    })

                    output.push(`${index + 1}. ${post.title}`)
                    output.push(`   üìÖ ${date} | ‚è±Ô∏è ${post.readingTime}`)
                    output.push(`   üìÇ ${post.category} | üè∑Ô∏è ${post.tags.slice(0, 3).join(", ")}`)
                    output.push(`   üìù ${post.excerpt.slice(0, 80)}${post.excerpt.length > 80 ? "..." : ""}`)
                    if (post.featured) {
                        output.push(`   ‚≠ê Featured Post`)
                    }
                    output.push("")
                })

                if (blogPosts.length > 10) {
                    output.push(`... and ${blogPosts.length - 10} more posts`)
                    output.push("")
                }

                output.push("üí° Use 'open blog <number>' to read a specific post")
                output.push("üîç Use 'search <term>' to find posts by keyword")
                output.push("üìñ Visit /blogs to see all posts")

                return output
            },
        },

        search: {
            name: "search",
            description: "Search blog posts",
            usage: "search <keyword>",
            examples: ["search react", "search performance", "search typescript"],
            action: (args) => {
                if (args.length === 0) {
                    return [
                        "Usage: search <keyword>",
                        "",
                        "Search through blog posts by title, content, or tags.",
                        "",
                        "Examples:",
                        "  search react",
                        "  search performance",
                        "  search typescript",
                        "",
                        "üí° Tip: Use 'blog' command first to see available posts",
                    ]
                }

                const searchTerm = args.join(" ")
                const matchingPosts = searchPosts(searchTerm)

                if (matchingPosts.length === 0) {
                    return [
                        `No posts found matching "${searchTerm}"`,
                        "",
                        "üí° Try different keywords or use 'blog' to see all posts",
                    ]
                }

                const output = [
                    `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ`,
                    `‚îÇ         SEARCH RESULTS (${matchingPosts.length})              ‚îÇ`,
                    `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`,
                    "",
                    `Found ${matchingPosts.length} post${matchingPosts.length === 1 ? "" : "s"} matching "${searchTerm}":`,
                    "",
                ]

                matchingPosts.slice(0, 5).forEach((post) => {
                    const originalIndex = blogPosts.findIndex((p) => p.slug === post.slug) + 1
                    const date = new Date(post.publishedAt).toLocaleDateString("en-US", {
                        month: "short",
                        day: "numeric",
                    })

                    output.push(`${originalIndex}. ${post.title}`)
                    output.push(`   üìÖ ${date} | üìÇ ${post.category}`)
                    output.push(`   üìù ${post.excerpt.slice(0, 80)}${post.excerpt.length > 80 ? "..." : ""}`)
                    output.push("")
                })

                if (matchingPosts.length > 5) {
                    output.push(`... and ${matchingPosts.length - 5} more results`)
                    output.push("")
                }

                output.push("üí° Use 'open blog <number>' to read a specific post")

                return output
            },
        },

        featured: {
            name: "featured",
            description: "Show featured blog posts",
            action: () => {
                const featuredPosts = useBlogStore.getState().getFeaturedPosts()

                if (featuredPosts.length === 0) {
                    return "No featured posts available."
                }

                const output = [
                    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                    "‚îÇ           FEATURED POSTS                ‚îÇ",
                    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                    "",
                ]

                featuredPosts.forEach((post, index) => {
                    const date = new Date(post.publishedAt).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                    })

                    output.push(`${index + 1}. ‚≠ê ${post.title}`)
                    output.push(`   üìÖ ${date} | ‚è±Ô∏è ${post.readingTime}`)
                    output.push(`   üìÇ ${post.category}`)
                    output.push(`   üìù ${post.excerpt.slice(0, 80)}${post.excerpt.length > 80 ? "..." : ""}`)
                    output.push("")
                })

                return output
            },
        },

        recent: {
            name: "recent",
            description: "Show recent blog posts",
            usage: "recent [number]",
            examples: ["recent", "recent 3", "recent 10"],
            action: (args) => {
                const limit = args.length > 0 ? Number.parseInt(args[0]) || 5 : 5
                const recentPosts = useBlogStore.getState().getRecentPosts(limit)

                if (recentPosts.length === 0) {
                    return "No recent posts available."
                }

                const output = [
                    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                    `‚îÇ         RECENT POSTS (${limit})              ‚îÇ`,
                    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                    "",
                ]

                recentPosts.forEach((post, index) => {
                    const date = new Date(post.publishedAt).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                    })

                    output.push(`${index + 1}. ${post.title}`)
                    output.push(`   üìÖ ${date} | ‚è±Ô∏è ${post.readingTime}`)
                    output.push(`   üìÇ ${post.category}`)
                    if (post.featured) {
                        output.push(`   ‚≠ê Featured Post`)
                    }
                    output.push("")
                })

                return output
            },
        },

        projects: {
            name: "projects",
            description: "Featured projects",
            action: () => {
                const output = [
                    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                    "‚îÇ            FEATURED PROJECTS            ‚îÇ",
                    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                    "No featured project added at the moment. Visit: https://github.com/bhaveyx",
                    "",
                ]

                output.push("üîó More projects: https://github.com/bhaveyx")

                return output
            },
        },

        contact: {
            name: "contact",
            description: "Contact information",
            action: () => [
                "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ",
                "‚îÇ            CONTACT INFO                 ‚îÇ",
                "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
                "",
                `Email: ${CONTACT_EMAIL}`,
                `GitHub: ${SOCIAL_LINKS.github}`,
                `LinkedIn: ${SOCIAL_LINKS.linkedin}`,
                `Twitter: ${SOCIAL_LINKS.twitter}`,
                `Website: ${WEBSITE_URL}`,
                "",
            ],
        },

        // minimize: {
        //     name: "minimize",
        //     description: "Minimize terminal",
        //     action: () => {
        //         minimizeTerminal()
        //         return "Terminal minimized. Click the terminal icon to restore."
        //     },
        // },

        // close: {
        //     name: "close",
        //     description: "Close terminal",
        //     action: () => {
        //         setTimeout(() => closeTerminal(), 500)
        //         return "Closing terminal... Use Ctrl+` to reopen."
        //     },
        // },

        // opacity: {
        //     name: "opacity",
        //     description: "Set terminal opacity",
        //     usage: "opacity <0-100>",
        //     examples: ["opacity 80", "opacity 100"],
        //     action: (args) => {
        //         if (args.length === 0) {
        //             return (
        //                 "Usage: opacity <0-100>. Current opacity: " + Math.round(useTerminalStore.getState().opacity * 100) + "%"
        //             )
        //         }

        //         const value = Number.parseInt(args[0])
        //         if (isNaN(value) || value < 0 || value > 100) {
        //             return "Invalid opacity value. Please use a number between 0 and 100."
        //         }

        //         setOpacity(value / 100)
        //         return `Terminal opacity set to ${value}%`
        //     },
        // },

        // reset: {
        //     name: "reset",
        //     description: "Reset terminal position and size",
        //     action: () => {
        //         resetTerminal()
        //         return "Terminal position and size reset to defaults."
        //     },
        // },

        // theme: {
        //     name: "theme",
        //     description: "Toggle terminal theme",
        //     action: () => {
        //         const newTheme = terminalTheme === "retro" ? "modern" : "retro"
        //         setTerminalTheme(newTheme)

        //         if (newTheme === "modern") {
        //             setTheme(theme === "dark" ? "light" : "dark")
        //         }

        //         return `Terminal theme switched to: ${newTheme} ${newTheme === "retro" ? "(green on black)" : "(modern colors)"}`
        //     },
        // },

        clear: {
            name: "clear",
            description: "Clear terminal",
            action: () => "CLEAR_TERMINAL",
        },

        open: {
            name: "open",
            description: "Open blog post or navigate to page",
            usage: "open <target>",
            examples: ["open blog 1", "open twitter", "open github"],
            action: async (args) => {
                if (args.length === 0) {
                    return [
                        "Usage: open <target>",
                        "",
                        "Available targets:",
                        "‚Ä¢ blog <number>  - Open specific blog post",
                        "‚Ä¢ twitter         - Open Twitter profile",
                        "‚Ä¢ github         - Open GitHub profile",
                        "‚Ä¢ linkedin       - Open LinkedIn profile",
                        "",
                        "Examples:",
                        "  open blog 1",
                        "  open twitter",
                        "  open github",
                    ]
                }

                const target = args[0]
                const param = args[1]

                if (target === "blog") {
                    if (!param) {
                        return "Please specify a blog post number. Use 'blog' to see available posts."
                    }

                    const postIndex = Number.parseInt(param) - 1
                    if (isNaN(postIndex) || postIndex < 0 || postIndex >= blogPosts.length) {
                        return `Invalid post number. Please use a number between 1 and ${blogPosts.length}.`
                    }

                    const post = blogPosts[postIndex]
                    setTimeout(() => {
                        router.push(`/blogs/${post.slug}`)
                    }, 1000)
                    return `Opening: ${post.title}`
                }

                if (target === "twitter" || target === "x") {
                    setTimeout(() => {
                        window.open(SOCIAL_LINKS.twitter, "_blank")
                    }, 1000)
                    return "Opening Twitter profile..."
                }

                if (target === "github") {
                    setTimeout(() => {
                        window.open(SOCIAL_LINKS.github, "_blank")
                    }, 1000)
                    return "Opening GitHub profile..."
                }

                if (target === "linkedin") {
                    setTimeout(() => {
                        window.open(SOCIAL_LINKS.linkedin, "_blank")
                    }, 1000)
                    return "Opening LinkedIn profile..."
                }

                return `Unknown target: ${target}. Type 'open' for usage.`
            },
        },

        goto: {
            name: "goto",
            description: "Navigate to different pages",
            usage: "goto <page>",
            examples: ["goto blog"],
            action: async (args) => {
                if (args.length === 0) {
                    return [
                        "Usage: goto <page>",
                        "",
                        "Available pages:",
                        "‚Ä¢ home      - Go to homepage",
                        "‚Ä¢ blog      - Go to blog listing",
                        "",
                        "Examples:",
                        "  goto home",
                        "  goto blog",
                    ]
                }

                const page = args[0]

                switch (page) {
                    case "home":
                        if (pathname === "/") {
                            return "You are already on the homepage."
                        }
                        setTimeout(() => {
                            router.push("/")
                        }, 1000)
                        return "Navigating to homepage..."
                    case "blog":
                        if (pathname === "/blog") {
                            return "You are already on the blog page."
                        }
                        setTimeout(() => {
                            router.push("/blogs")
                        }, 1000)
                        return "Navigating to blog..."
                    default:
                        return `Unknown page: ${page}. Type 'goto' for available pages.`
                }
            },
        },
    }

    return {
        commands,
        currentDirectory,
        setTheme,
        theme,
    }
}
